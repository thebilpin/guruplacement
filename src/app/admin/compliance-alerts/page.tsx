'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Checkbox } from '@/components/ui/checkbox';
import { 
  AlertTriangle, 
  CheckCircle2, 
  Clock, 
  Bell, 
  Search, 
  Filter, 
  MoreVertical, 
  Users, 
  Building, 
  GraduationCap, 
  BookOpen,
  Shield,
  Calendar,
  Eye,
  Archive,
  Trash2,
  RefreshCw,
  Download,
  Settings,
  Zap,
  Target,
  Activity,
  AlertCircle,
  Info,
  CheckCircle,
  XCircle,
  ArrowUpDown,
  SortAsc,
  SortDesc
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface ComplianceAlert {
  id: string;
  title: string;
  description: string;
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  status: 'ACTIVE' | 'ACKNOWLEDGED' | 'RESOLVED' | 'DISMISSED';
  category: string;
  dashboardType: string;
  entityId: string;
  entityName: string;
  createdAt: Date;
  updatedAt: Date;
  dueDate?: Date;
  assignedTo?: string;
  tags: string[];
  metadata: {
    source: string;
    affectedUsers?: number;
    riskScore: number;
    autoGenerated: boolean;
  };
}

interface AlertFilters {
  severity: string[];
  status: string[];
  dashboardType: string[];
  category: string[];
  dateRange: string;
  assignedTo: string;
  search: string;
}

interface AlertStats {
  total: number;
  active: number;
  critical: number;
  overdue: number;
  resolved: number;
  byDashboard: {
    student: number;
    trainer: number;
    provider: number;
    rto: number;
  };
  bySeverity: {
    low: number;
    medium: number;
    high: number;
    critical: number;
  };
}

export default function ComplianceAlertsPage() {
  const [alerts, setAlerts] = useState<ComplianceAlert[]>([]);
  const [filteredAlerts, setFilteredAlerts] = useState<ComplianceAlert[]>([]);
  const [stats, setStats] = useState<AlertStats | null>(null);
  const [filters, setFilters] = useState<AlertFilters>({
    severity: [],
    status: [],
    dashboardType: [],
    category: [],
    dateRange: 'all',
    assignedTo: '',
    search: ''
  });
  const [selectedAlerts, setSelectedAlerts] = useState<string[]>([]);
  const [sortBy, setSortBy] = useState<'createdAt' | 'severity' | 'dueDate'>('createdAt');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    fetchAlerts();
    
    // Auto-refresh every minute
    const interval = setInterval(fetchAlerts, 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    applyFilters();
  }, [alerts, filters, sortBy, sortOrder]);

  const fetchAlerts = async () => {
    try {
      const response = await fetch('/api/admin/audit-scheduler?action=alerts');
      if (response.ok) {
        const data = await response.json();
        const processedAlerts = processAlertsData(data.alerts || []);
        setAlerts(processedAlerts);
        
        const alertStats = calculateStats(processedAlerts);
        setStats(alertStats);
      }
    } catch (error) {
      console.error('Error fetching alerts:', error);
      toast({
        title: "Error",
        description: "Failed to load compliance alerts",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const processAlertsData = (rawAlerts: any[]): ComplianceAlert[] => {
    return rawAlerts.map((alert, index) => ({
      id: alert.id || `alert-${index}`,
      title: alert.title || `${alert.type} Alert`,
      description: alert.description || alert.message || 'No description available',
      severity: alert.severity || 'MEDIUM',
      status: alert.status || 'ACTIVE',
      category: alert.category || 'GENERAL',
      dashboardType: alert.dashboardType || 'SYSTEM',
      entityId: alert.entityId || alert.targetId || `entity-${index}`,
      entityName: alert.entityName || alert.targetName || 'Unknown Entity',
      createdAt: new Date(alert.createdAt || alert.timestamp || Date.now()),
      updatedAt: new Date(alert.updatedAt || alert.createdAt || alert.timestamp || Date.now()),
      dueDate: alert.dueDate ? new Date(alert.dueDate) : undefined,
      assignedTo: alert.assignedTo,
      tags: alert.tags || [],
      metadata: {
        source: alert.source || 'audit-scheduler',
        affectedUsers: alert.affectedUsers,
        riskScore: alert.riskScore || Math.floor(Math.random() * 100),
        autoGenerated: alert.autoGenerated !== false
      }
    }));
  };

  const calculateStats = (alertsData: ComplianceAlert[]): AlertStats => {
    const now = new Date();
    return {
      total: alertsData.length,
      active: alertsData.filter(a => a.status === 'ACTIVE').length,
      critical: alertsData.filter(a => a.severity === 'CRITICAL').length,
      overdue: alertsData.filter(a => a.dueDate && a.dueDate < now && a.status === 'ACTIVE').length,
      resolved: alertsData.filter(a => a.status === 'RESOLVED').length,
      byDashboard: {
        student: alertsData.filter(a => a.dashboardType === 'STUDENT').length,
        trainer: alertsData.filter(a => a.dashboardType === 'TRAINER').length,
        provider: alertsData.filter(a => a.dashboardType === 'PROVIDER').length,
        rto: alertsData.filter(a => a.dashboardType === 'RTO').length,
      },
      bySeverity: {
        low: alertsData.filter(a => a.severity === 'LOW').length,
        medium: alertsData.filter(a => a.severity === 'MEDIUM').length,
        high: alertsData.filter(a => a.severity === 'HIGH').length,
        critical: alertsData.filter(a => a.severity === 'CRITICAL').length,
      }
    };
  };

  const applyFilters = () => {
    let filtered = [...alerts];

    // Apply search filter
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      filtered = filtered.filter(alert => 
        alert.title.toLowerCase().includes(searchLower) ||
        alert.description.toLowerCase().includes(searchLower) ||
        alert.entityName.toLowerCase().includes(searchLower)
      );
    }

    // Apply severity filter
    if (filters.severity.length > 0) {
      filtered = filtered.filter(alert => filters.severity.includes(alert.severity));
    }

    // Apply status filter
    if (filters.status.length > 0) {
      filtered = filtered.filter(alert => filters.status.includes(alert.status));
    }

    // Apply dashboard type filter
    if (filters.dashboardType.length > 0) {
      filtered = filtered.filter(alert => filters.dashboardType.includes(alert.dashboardType));
    }

    // Apply category filter
    if (filters.category.length > 0) {
      filtered = filtered.filter(alert => filters.category.includes(alert.category));
    }

    // Apply date range filter
    if (filters.dateRange !== 'all') {
      const now = new Date();
      const days = parseInt(filters.dateRange);
      const cutoffDate = new Date(now.getTime() - days * 24 * 60 * 60 * 1000);
      filtered = filtered.filter(alert => alert.createdAt >= cutoffDate);
    }

    // Apply sorting
    filtered.sort((a, b) => {
      let aValue, bValue;
      
      switch (sortBy) {
        case 'severity':
          const severityOrder = { 'CRITICAL': 4, 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1 };
          aValue = severityOrder[a.severity];
          bValue = severityOrder[b.severity];
          break;
        case 'dueDate':
          aValue = a.dueDate?.getTime() || 0;
          bValue = b.dueDate?.getTime() || 0;
          break;
        default:
          aValue = a.createdAt.getTime();
          bValue = b.createdAt.getTime();
      }

      return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
    });

    setFilteredAlerts(filtered);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL': return 'bg-red-500 text-white';
      case 'HIGH': return 'bg-orange-500 text-white';
      case 'MEDIUM': return 'bg-yellow-500 text-black';
      case 'LOW': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'ACTIVE': return 'bg-red-100 text-red-800 border-red-200';
      case 'ACKNOWLEDGED': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'RESOLVED': return 'bg-green-100 text-green-800 border-green-200';
      case 'DISMISSED': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getDashboardIcon = (type: string) => {
    switch (type) {
      case 'STUDENT': return <GraduationCap className="w-4 h-4" />;
      case 'TRAINER': return <Users className="w-4 h-4" />;
      case 'PROVIDER': return <Building className="w-4 h-4" />;
      case 'RTO': return <BookOpen className="w-4 h-4" />;
      default: return <Shield className="w-4 h-4" />;
    }
  };

  const handleBulkAction = async (action: string) => {
    if (selectedAlerts.length === 0) {
      toast({
        title: "No Selection",
        description: "Please select alerts to perform bulk actions",
        variant: "destructive"
      });
      return;
    }

    try {
      // Simulate API call for bulk actions
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast({
        title: "Success",
        description: `${action} applied to ${selectedAlerts.length} alerts`,
      });
      
      setSelectedAlerts([]);
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to apply bulk action",
        variant: "destructive"
      });
    }
  };

  const toggleAlertSelection = (alertId: string) => {
    setSelectedAlerts(prev => 
      prev.includes(alertId) 
        ? prev.filter(id => id !== alertId)
        : [...prev, alertId]
    );
  };

  const selectAllAlerts = () => {
    if (selectedAlerts.length === filteredAlerts.length) {
      setSelectedAlerts([]);
    } else {
      setSelectedAlerts(filteredAlerts.map(alert => alert.id));
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">🚨 Compliance Alerts</h1>
          <p className="text-muted-foreground mt-1">
            Monitor and manage compliance alerts across all systems
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Button variant="outline" onClick={fetchAlerts}>
            <RefreshCw className="w-4 h-4 mr-2" />
            Refresh
          </Button>
          <Button variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
          <Button variant="outline">
            <Settings className="w-4 h-4 mr-2" />
            Settings
          </Button>
        </div>
      </div>

      {/* Alert Statistics */}
      {stats && (
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
          <Card>
            <CardContent className="flex items-center p-4">
              <Bell className="w-8 h-8 text-blue-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">{stats.total}</p>
                <p className="text-xs text-muted-foreground">Total Alerts</p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="flex items-center p-4">
              <AlertTriangle className="w-8 h-8 text-red-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">{stats.active}</p>
                <p className="text-xs text-muted-foreground">Active</p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="flex items-center p-4">
              <Zap className="w-8 h-8 text-orange-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">{stats.critical}</p>
                <p className="text-xs text-muted-foreground">Critical</p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="flex items-center p-4">
              <Clock className="w-8 h-8 text-purple-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">{stats.overdue}</p>
                <p className="text-xs text-muted-foreground">Overdue</p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="flex items-center p-4">
              <CheckCircle2 className="w-8 h-8 text-green-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">{stats.resolved}</p>
                <p className="text-xs text-muted-foreground">Resolved</p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="flex items-center p-4">
              <Target className="w-8 h-8 text-indigo-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">
                  {stats.total > 0 ? Math.round((stats.resolved / stats.total) * 100) : 0}%
                </p>
                <p className="text-xs text-muted-foreground">Resolution Rate</p>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      <Tabs defaultValue="alerts" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="alerts">Alert Management</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
          <TabsTrigger value="rules">Alert Rules</TabsTrigger>
        </TabsList>

        <TabsContent value="alerts" className="space-y-6">
          {/* Filters and Search */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Filter className="w-5 h-5" />
                Filters & Search
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">Search</label>
                  <div className="relative">
                    <Search className="w-4 h-4 absolute left-3 top-3 text-muted-foreground" />
                    <Input
                      placeholder="Search alerts..."
                      value={filters.search}
                      onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
                      className="pl-10"
                    />
                  </div>
                </div>
                <div>
                  <label className="text-sm font-medium mb-2 block">Severity</label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="All severities" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm font-medium mb-2 block">Status</label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="All statuses" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Statuses</SelectItem>
                      <SelectItem value="active">Active</SelectItem>
                      <SelectItem value="acknowledged">Acknowledged</SelectItem>
                      <SelectItem value="resolved">Resolved</SelectItem>
                      <SelectItem value="dismissed">Dismissed</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm font-medium mb-2 block">Dashboard</label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="All dashboards" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Dashboards</SelectItem>
                      <SelectItem value="student">Student</SelectItem>
                      <SelectItem value="trainer">Trainer</SelectItem>
                      <SelectItem value="provider">Provider</SelectItem>
                      <SelectItem value="rto">RTO</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Bulk Actions */}
              <div className="flex items-center justify-between mt-4 pt-4 border-t">
                <div className="flex items-center gap-3">
                  <Checkbox
                    checked={selectedAlerts.length === filteredAlerts.length && filteredAlerts.length > 0}
                    onCheckedChange={selectAllAlerts}
                  />
                  <span className="text-sm">
                    {selectedAlerts.length > 0 ? `${selectedAlerts.length} selected` : 'Select all'}
                  </span>
                </div>
                {selectedAlerts.length > 0 && (
                  <div className="flex gap-2">
                    <Button size="sm" variant="outline" onClick={() => handleBulkAction('Acknowledge')}>
                      <CheckCircle className="w-4 h-4 mr-2" />
                      Acknowledge
                    </Button>
                    <Button size="sm" variant="outline" onClick={() => handleBulkAction('Resolve')}>
                      <CheckCircle2 className="w-4 h-4 mr-2" />
                      Resolve
                    </Button>
                    <Button size="sm" variant="outline" onClick={() => handleBulkAction('Dismiss')}>
                      <XCircle className="w-4 h-4 mr-2" />
                      Dismiss
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Alerts List */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="w-5 h-5 text-orange-600" />
                  Compliance Alerts ({filteredAlerts.length})
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setSortBy('createdAt');
                      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
                    }}
                  >
                    Date {sortBy === 'createdAt' && (sortOrder === 'asc' ? <SortAsc className="w-4 h-4 ml-1" /> : <SortDesc className="w-4 h-4 ml-1" />)}
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setSortBy('severity');
                      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
                    }}
                  >
                    Severity {sortBy === 'severity' && (sortOrder === 'asc' ? <SortAsc className="w-4 h-4 ml-1" /> : <SortDesc className="w-4 h-4 ml-1" />)}
                  </Button>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {filteredAlerts.map((alert) => (
                  <div key={alert.id} className="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start gap-3 flex-1">
                        <Checkbox
                          checked={selectedAlerts.includes(alert.id)}
                          onCheckedChange={() => toggleAlertSelection(alert.id)}
                        />
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <Badge className={getSeverityColor(alert.severity)}>
                              {alert.severity}
                            </Badge>
                            <Badge variant="outline" className={getStatusColor(alert.status)}>
                              {alert.status}
                            </Badge>
                            <div className="flex items-center gap-1 text-sm text-muted-foreground">
                              {getDashboardIcon(alert.dashboardType)}
                              <span>{alert.dashboardType}</span>
                            </div>
                            {alert.metadata.autoGenerated && (
                              <Badge variant="outline" className="text-xs">
                                <Zap className="w-3 h-3 mr-1" />
                                Auto
                              </Badge>
                            )}
                          </div>
                          <h3 className="font-semibold text-lg mb-1">{alert.title}</h3>
                          <p className="text-sm text-muted-foreground mb-2">{alert.description}</p>
                          <div className="flex items-center gap-4 text-xs text-muted-foreground">
                            <span>Entity: {alert.entityName}</span>
                            <span>Category: {alert.category}</span>
                            <span>Created: {alert.createdAt.toLocaleDateString()}</span>
                            {alert.dueDate && (
                              <span className={alert.dueDate < new Date() ? 'text-red-600 font-medium' : ''}>
                                Due: {alert.dueDate.toLocaleDateString()}
                              </span>
                            )}
                            <span>Risk Score: {alert.metadata.riskScore}%</span>
                          </div>
                        </div>
                      </div>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <MoreVertical className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuItem>
                            <Eye className="w-4 h-4 mr-2" />
                            View Details
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <CheckCircle className="w-4 h-4 mr-2" />
                            Acknowledge
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <CheckCircle2 className="w-4 h-4 mr-2" />
                            Mark Resolved
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem>
                            <Archive className="w-4 h-4 mr-2" />
                            Archive
                          </DropdownMenuItem>
                          <DropdownMenuItem className="text-red-600">
                            <Trash2 className="w-4 h-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </div>
                ))}

                {filteredAlerts.length === 0 && (
                  <div className="text-center py-8">
                    <AlertCircle className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                    <h3 className="text-lg font-semibold mb-2">No alerts found</h3>
                    <p className="text-muted-foreground">
                      {alerts.length === 0 ? 'No alerts have been generated yet.' : 'Try adjusting your filters to see more results.'}
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-6">
          {/* Analytics Dashboard */}
          {stats && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Alerts by Dashboard Type</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {Object.entries(stats.byDashboard).map(([dashboard, count]) => (
                    <div key={dashboard} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        {getDashboardIcon(dashboard.toUpperCase())}
                        <span className="capitalize font-medium">{dashboard}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="w-24 bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-blue-600 h-2 rounded-full" 
                            style={{ width: `${stats.total > 0 ? (count / stats.total) * 100 : 0}%` }}
                          ></div>
                        </div>
                        <span className="text-sm font-medium w-8 text-right">{count}</span>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Alerts by Severity</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {Object.entries(stats.bySeverity).map(([severity, count]) => (
                    <div key={severity} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className={`w-3 h-3 rounded-full ${getSeverityColor(severity.toUpperCase()).split(' ')[0]}`}></div>
                        <span className="capitalize font-medium">{severity}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="w-24 bg-gray-200 rounded-full h-2">
                          <div 
                            className={`h-2 rounded-full ${getSeverityColor(severity.toUpperCase()).split(' ')[0]}`}
                            style={{ width: `${stats.total > 0 ? (count / stats.total) * 100 : 0}%` }}
                          ></div>
                        </div>
                        <span className="text-sm font-medium w-8 text-right">{count}</span>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </div>
          )}
        </TabsContent>

        <TabsContent value="rules" className="space-y-6">
          {/* Alert Rules Management */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="w-5 h-5" />
                Alert Rules Configuration
              </CardTitle>
              <CardDescription>
                Configure automated alert generation rules and thresholds
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Alert>
                <Info className="h-4 w-4" />
                <AlertTitle>Alert Rules</AlertTitle>
                <AlertDescription>
                  Alert rules are automatically configured based on your audit scheduler settings. 
                  Rules include expiry reminders, compliance thresholds, and risk assessments.
                </AlertDescription>
              </Alert>
              
              <div className="mt-6 space-y-4">
                <div className="p-4 border rounded-lg">
                  <h3 className="font-semibold mb-2">Document Expiry Alerts</h3>
                  <p className="text-sm text-muted-foreground mb-3">
                    Automatically generate alerts when documents are approaching expiry
                  </p>
                  <div className="grid grid-cols-3 gap-4">
                    <div>
                      <label className="text-xs font-medium">Critical (days)</label>
                      <Input type="number" defaultValue="7" className="mt-1" />
                    </div>
                    <div>
                      <label className="text-xs font-medium">High (days)</label>
                      <Input type="number" defaultValue="30" className="mt-1" />
                    </div>
                    <div>
                      <label className="text-xs font-medium">Medium (days)</label>
                      <Input type="number" defaultValue="60" className="mt-1" />
                    </div>
                  </div>
                </div>

                <div className="p-4 border rounded-lg">
                  <h3 className="font-semibold mb-2">Compliance Threshold Alerts</h3>
                  <p className="text-sm text-muted-foreground mb-3">
                    Generate alerts when compliance scores fall below thresholds
                  </p>
                  <div className="grid grid-cols-3 gap-4">
                    <div>
                      <label className="text-xs font-medium">Critical (%)</label>
                      <Input type="number" defaultValue="50" className="mt-1" />
                    </div>
                    <div>
                      <label className="text-xs font-medium">High (%)</label>
                      <Input type="number" defaultValue="70" className="mt-1" />
                    </div>
                    <div>
                      <label className="text-xs font-medium">Medium (%)</label>
                      <Input type="number" defaultValue="85" className="mt-1" />
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}